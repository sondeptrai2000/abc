var EventEmitter = require('events').EventEmitter;

/**
 * Throttle a stream so that it only emits the 'data' event less than
 * the specified number of times per second.
 *
 * @param {ReadableStream} input
 * @return {ReadableStream} output
 * @api public
 */

module.exports = function (input, per_second) {

    var buffer = [], buffer_len = 0
      , output = new EventEmitter
      , paused, user_paused
      , ended, remaining;

    if (input._line_stream) {
        output._line_stream = true;
    }

    input.on('data', function (data) {
        buffer.push(data);
        buffer_len++;
        //If the buffer gets beyond some point, pause the stream
    });

    input.on('end', function () {
        ended = true;
        output.emit('end');
    });

    Object.defineProperty(output, 'readable', {
        get: function () {
            return input.readable;
        }
    });

    input.on('error', function (err) {
        output.emit('error', err);
    });

    input.on('close', function () {
        output.emit('close');
    });

    output.pause = function () {
        user_paused = true;
        input.pause();
    };

    output.resume = function () {
        user_paused = false;
        input.resume();
    };

    ['destroySoon', 'setEncoding'].forEach(function (method) {
        output[method] = function () {
            return input[method].apply(input, arguments);
        };
    });

    input.resume();

    function emit() {
        remaining = per_second;
        var i = 0;
        for (; i < buffer_len && remaining--; i++) {
            output.emit('data', buffer[i]);
        }
        buffer_len -= i + 1;
        //If paused and not user_paused and not ended and it gets below some point, resume
        return emit;
    }

    setTimeout(emit(), 1000);

    return output;
};

